#include <stdio.h>
#define MAX_SIZE 100

// Stack structure
typedef struct {
    int stack[MAX_SIZE];
    int top;
} Stack;

// Function to initialize the stack
void initialize(Stack *s) {
    s->top = -1;
}

// Function to check if the stack is empty
int is_empty(Stack *s) {
    return s->top == -1;
}

// Function to check if the stack is full
int is_full(Stack *s) {
    return s->top == MAX_SIZE - 1;
}

// Function to push an element onto the stack
void push(Stack *s, int element) {
    if (is_full(s)) {
        printf("Stack Overflow! Cannot push element.\n");
    } else {
        s->stack[++s->top] = element;
        printf("Pushed element: %d\n", element);
    }
}

// Function to pop an element from the stack
void pop(Stack *s) {
    if (is_empty(s)) {
        printf("Stack Underflow! Cannot pop element.\n");
    } else {
        int element = s->stack[s->top--];
        printf("Popped element: %d\n", element);
    }
}

// Function to display the stack elements
void display(Stack *s) {
    if (is_empty(s)) {
        printf("Stack is empty.\n");
    } else {
        printf("Stack elements:\n");
        for (int i = s->top; i >= 0; i--) {
            printf("%d\n", s->stack[i]);
        }
    }
}

int main() {
    Stack stack;
    initialize(&stack);

    int choice, element;

    while (1) {
        printf("\n----- Stack Operations -----\n");
        printf("1. Push\n");
        printf("2. Pop\n");
        printf("3. Check if stack is empty\n");
        printf("4. Check if stack is full\n");
        printf("5. Display stack elements\n");
        printf("6. Exit\n");

        printf("Enter your choice (1-6): ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the element to push: ");
                scanf("%d", &element);
                push(&stack, element);
                break;
            case 2:
                pop(&stack);
                break;
            case 3:
                if (is_empty(&stack)) {
                    printf("Stack is empty.\n");
                } else {
                    printf("Stack is not empty.\n");
                }
                break;
            case 4:
                if (is_full(&stack)) {
                    printf("Stack is full.\n");
                } else {
                    printf("Stack is not full.\n");
                }
                break;
            case 5:
                display(&stack);
                break;
            case 6:
                return 0;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}
